
	@PostMapping("/Uploadfile")
	public void uploadFile11(@RequestParam(value = "upload_file") List<MultipartFile> file,HttpServletRequest request) {
		System.out.println("Upload11***************************");
		
		List<File> listoffile = null;
		File c;
		AWSCredentials credentials = new BasicAWSCredentials("AKIAI7VDFZTLEOFLBXXA",
				"2/TWPnvRe2Gs3jZ/NmoM5lzdXNoAKUqOKTuXDViM");
		AmazonS3 s3client = new AmazonS3Client(credentials);
		String bucketName=null;
		for (Bucket bucket : s3client.listBuckets()) {
			bucketName=bucket.getName();
		}
		for(MultipartFile f:file){
			String file_name=f.getOriginalFilename();
			System.out.println(f.getSize());
			System.out.println("############"+file_name);
			c=new File(file_name);
			try {
			c.createNewFile();
			FileOutputStream fos = new FileOutputStream(c);
			fos.write(file_name.getBytes());
			fos.close();
			listoffile.add(c);
			} catch (IllegalStateException e) {
				
				e.printStackTrace();
			} catch (IOException e) {
				
				e.printStackTrace();
			}
			System.out.println("SSSSSSSSSSSSS");
			s3client.putObject(
					new PutObjectRequest(bucketName, file_name, c).withCannedAcl(CannedAccessControlList.PublicRead));

		}
		
		
	/*	String f_name = file.getOriginalFilename();
		System.out.println(f_name);
	
		File convFile = new File(file.getOriginalFilename());
		try {
			convFile.createNewFile();
			FileOutputStream fos = new FileOutputStream(convFile);
			fos.write(file.getBytes());
			fos.close();
		} catch (IllegalStateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		AWSCredentials credentials = new BasicAWSCredentials("AKIAI7VDFZTLEOFLBXXA",
				"2/TWPnvRe2Gs3jZ/NmoM5lzdXNoAKUqOKTuXDViM");
		AmazonS3 s3client = new AmazonS3Client(credentials);
	String bucketName=null;
		for (Bucket bucket : s3client.listBuckets()) {
			bucketName=bucket.getName();
		}
	
		s3client.putObject(
				new PutObjectRequest(bucketName, f_name, convFile).withCannedAcl(CannedAccessControlList.PublicRead));
*/
	}